import React, { useState } from 'react';
import { Button, Modal, Popconfirm } from 'antd';
import './grant.modal.scss';
import AvatarUser from '../user/avatar';
import { useDispatch, useSelector } from 'react-redux';
import axios from '../../utils/axios';
import { sendNotifyToChatRealTime } from '../../utils/handleChat';
import { editGroup } from '../../redux/actions/app.action';
import { socket } from '../../utils/io';
import { MESSAGES } from '../../redux/types/user.type';
import { toast } from 'react-toastify';

const GrantModal = ({ children, chat }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const user = useSelector((state) => state.appReducer?.userInfo?.user);
  const dispatch = useDispatch();
  const [selected, setSelected] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const showModal = () => {
    setIsModalOpen(true);
  };
  const handleOk = async () => {
    try {
      setIsLoading(true);
      const res = await axios.put('/chat/group/grant', {
        chatId: chat._id,
        memberId: selected.id,
      });

      await sendNotifyToChatRealTime(
        chat._id,
        `üéâ ${selected.userName} ƒë√£ tr·ªü th√†nh tr∆∞·ªüng nh√≥m üéâ`,
        MESSAGES.NOTIFY
      );
      if (res.errCode === 0) {
        dispatch(editGroup(res.data));
        socket.then((socket) => {
          socket.emit('grant', res.data);
        });
      }
      setIsLoading(false);
      setIsModalOpen(false);
    } catch (error) {
      console.error('Failed to grant leader:', error);
      setIsLoading(false);
      toast.error('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau!');
    }
  };
  const handleCancel = () => {
    setSelected(null);
    setIsModalOpen(false);
  };

  const handleGrantLeader = async (item) => {
    setSelected(item);
  };

  const confirm = (e) => {
    handleOk();
  };
  const cancel = (e) => {
    handleCancel();
  };

  return (
    <>
      <span onClick={showModal}>{children}</span>
      <Modal
        title="Chuy·ªÉn quy·ªÅn tr∆∞·ªüng nh√≥m"
        open={isModalOpen}
        onOk={handleOk}
        onCancel={handleCancel}
        footer={[
          <Button key="back" onClick={handleCancel}>
            H·ªßy
          </Button>,
          <Popconfirm
            description="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën chuy·ªÉn quy·ªÅn tr∆∞·ªüng nh√≥m?"
            onConfirm={confirm}
            onCancel={cancel}
            okText="X√°c nh·∫≠n"
            cancelText="H·ªßy"
            key="submit"
          >
            <Button disabled={!selected} type="primary" loading={isLoading}>
              Chuy·ªÉn nh∆∞·ª£ng
            </Button>
          </Popconfirm>,
        ]}
      >
        <div className="grant-modal-container">
          <div className="note">
            Ng∆∞·ªùi ƒë∆∞·ª£c ch·ªçn s·∫Ω tr·ªü th√†nh tr∆∞·ªüng nh√≥m v√† c√≥ m·ªçi quy·ªÅn qu·∫£n l√Ω
            nh√≥m. B·∫°n s·∫Ω m·∫•t quy·ªÅn qu·∫£n l√Ω nh∆∞ng v·∫´n l√† m·ªôt th√†nh vi√™n c·ªßa nh√≥m.
            H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ kh√¥i ph·ª•c.
          </div>
          <div className="main-content">
            {chat?.participants?.map((item, index) => {
              if (user?.id !== item.id) {
                return (
                  <div
                    key={index}
                    className={`group-user ${
                      selected?.id === item.id ? 'selected' : ''
                    }`}
                    onClick={() => handleGrantLeader(item)}
                  >
                    <AvatarUser image={item?.avatar} name={item?.userName} />
                    <p className="name">{item?.userName}</p>
                  </div>
                );
              } else return null;
            })}
          </div>
        </div>
      </Modal>
    </>
  );
};
export default GrantModal;
